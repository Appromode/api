// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using marking_api.Data;

#nullable disable

namespace marking_api.Data.Migrations
{
    [DbContext(typeof(MarkingDbContext))]
    [Migration("20220320193838_Invites")]
    partial class Invites
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("marking_api.DataModel.API.RefreshTokenDM", b =>
                {
                    b.Property<long>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JwtId")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserId");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFileDM", b =>
                {
                    b.Property<long>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("FileDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("FolderID")
                        .HasColumnType("bigint");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("FileId");

                    b.HasIndex("FolderID");

                    b.ToTable("FSFiles", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFileStateDM", b =>
                {
                    b.Property<long>("FileStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("FileStateDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("FileStateType")
                        .HasColumnType("int");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("FileStateId");

                    b.ToTable("FSFileStates", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFileVersionDM", b =>
                {
                    b.Property<long>("FileVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("longblob");

                    b.Property<string>("FileExtension")
                        .HasColumnType("longtext");

                    b.Property<long?>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FileStateId")
                        .HasColumnType("bigint");

                    b.Property<string>("FilecontentType")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UploadFileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("FileVersionId");

                    b.HasIndex("FileId");

                    b.HasIndex("FileStateId");

                    b.ToTable("FSFileVersions", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFolderDM", b =>
                {
                    b.Property<long>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("FolderDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FolderName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("ParentFolderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("FolderId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("FSFolders", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFolderFileDM", b =>
                {
                    b.Property<long>("FolderFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long>("FolderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("FolderFileId");

                    b.HasIndex("FileId");

                    b.HasIndex("FolderId");

                    b.ToTable("FSFolderFiles", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFolderRoleDM", b =>
                {
                    b.Property<long>("FolderRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<long>("FolderId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("FolderRoleId");

                    b.HasIndex("FolderId");

                    b.HasIndex("RoleId");

                    b.ToTable("FSFolderRoles", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.LinkDM", b =>
                {
                    b.Property<long>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("LinkIcon")
                        .HasColumnType("longtext");

                    b.Property<string>("LinkName")
                        .HasColumnType("longtext");

                    b.Property<long?>("LinkParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("LinkPosition")
                        .HasColumnType("bigint");

                    b.Property<string>("LinkSecurity")
                        .HasColumnType("longtext");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("LinkId");

                    b.HasIndex("LinkParentId");

                    b.ToTable("Links", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RoleId");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("IdRoles", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IdRoleClaims", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.RoleLinkDM", b =>
                {
                    b.Property<long>("RoleLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("LinkId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoleLinkId");

                    b.HasIndex("LinkId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleLinks", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.RolePermission", b =>
                {
                    b.Property<long>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("PermissionSecurity")
                        .HasColumnType("longtext");

                    b.Property<int>("PermissionType")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("SiteAreaId")
                        .HasColumnType("bigint");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SiteAreaId");

                    b.ToTable("IdRolePermission", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.SiteArea", b =>
                {
                    b.Property<long>("SiteAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("SiteAreaId");

                    b.ToTable("IdSiteArea", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("longblob")
                        .HasColumnName("ProfilePicture");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("IdUsers", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdUserClaims", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdUserLogins", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserId");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdUserRoles", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdUserTokens", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Logging.AuditDM", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AuditType")
                        .HasColumnType("longtext");

                    b.Property<string>("ChangedColumns")
                        .HasColumnType("longtext");

                    b.Property<string>("KeyValues")
                        .HasColumnType("longtext");

                    b.Property<string>("NewValues")
                        .HasColumnType("longtext");

                    b.Property<string>("OldValues")
                        .HasColumnType("longtext");

                    b.Property<string>("TableName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserId");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("AuditId");

                    b.HasIndex("UserId");

                    b.ToTable("Audit", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Logging.LogDM", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Exception")
                        .HasColumnType("longtext");

                    b.Property<string>("Level")
                        .HasColumnType("longtext");

                    b.Property<string>("Logger")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("Thread")
                        .HasColumnType("longtext");

                    b.HasKey("LogId");

                    b.ToTable("Logs", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.CommentDM", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .HasColumnType("longtext");

                    b.Property<long>("ParentThreadId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectDMProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuotedCommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("CommentId");

                    b.HasIndex("ParentThreadId");

                    b.HasIndex("ProjectDMProjectId");

                    b.HasIndex("QuotedCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.FeedbackDM", b =>
                {
                    b.Property<long>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<int>("CriticalReflection")
                        .HasColumnType("int");

                    b.Property<int>("ProjectContributions")
                        .HasColumnType("int");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("TaskDifficulty")
                        .HasColumnType("int");

                    b.Property<int>("TeamworkSkills")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalAchievements")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalContributions")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserId");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.GradeDM", b =>
                {
                    b.Property<long>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<long>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserId");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("GradeId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Grades", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.GroupDM", b =>
                {
                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("GroupId");

                    b.HasIndex("GroupName")
                        .IsUnique();

                    b.ToTable("Groups", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.GroupMarkerDM", b =>
                {
                    b.Property<long>("GroupMarkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("GroupMarkerId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMarkers", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.InviteDM", b =>
                {
                    b.Property<long>("InviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SenderId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("InviteId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Invites", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.ProjectDM", b =>
                {
                    b.Property<long>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<bool>("EthicsAccepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("EthicsFormId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("LinkedThreadId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("ProjectId");

                    b.HasIndex("EthicsFormId");

                    b.HasIndex("LinkedThreadId");

                    b.ToTable("Projects", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.TagDM", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("GroupTag")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ProjectTag")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TagName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("TagId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Tags", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.ThreadDM", b =>
                {
                    b.Property<long>("ThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<long?>("LinkedProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("int");

                    b.Property<string>("ThreadContent")
                        .HasColumnType("longtext");

                    b.Property<bool>("ThreadStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ThreadTitle")
                        .HasColumnType("longtext");

                    b.Property<int?>("TotalMembers")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("ThreadId");

                    b.HasIndex("LinkedProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.UserGradeDM", b =>
                {
                    b.Property<long>("UserGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarkId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserGradeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MarkId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGrades", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.UserGroupDM", b =>
                {
                    b.Property<long>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.UserTagsDM", b =>
                {
                    b.Property<long>("UserTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("canDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("createdBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("deletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserTagId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTags", "dbo");
                });

            modelBuilder.Entity("marking_api.DataModel.API.RefreshTokenDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFileDM", b =>
                {
                    b.HasOne("marking_api.DataModel.FileSystem.FSFolderDM", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFileVersionDM", b =>
                {
                    b.HasOne("marking_api.DataModel.FileSystem.FSFileDM", "File")
                        .WithMany("FileVersions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("marking_api.DataModel.FileSystem.FSFileStateDM", "FileState")
                        .WithMany("FileVersions")
                        .HasForeignKey("FileStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("File");

                    b.Navigation("FileState");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFolderDM", b =>
                {
                    b.HasOne("marking_api.DataModel.FileSystem.FSFolderDM", "ParentFolder")
                        .WithMany("ChildFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFolderFileDM", b =>
                {
                    b.HasOne("marking_api.DataModel.FileSystem.FSFileDM", "File")
                        .WithMany("FolderFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.FileSystem.FSFolderDM", "Folder")
                        .WithMany("FolderFiles")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFolderRoleDM", b =>
                {
                    b.HasOne("marking_api.DataModel.FileSystem.FSFolderDM", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Folder");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.LinkDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Identity.LinkDM", "LinkParent")
                        .WithMany("LinkChildren")
                        .HasForeignKey("LinkParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LinkParent");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.RoleClaim", b =>
                {
                    b.HasOne("marking_api.DataModel.Identity.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.RoleLinkDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Identity.LinkDM", "Link")
                        .WithMany("RoleLinks")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Link");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.RolePermission", b =>
                {
                    b.HasOne("marking_api.DataModel.Identity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("marking_api.DataModel.Identity.SiteArea", "SiteArea")
                        .WithMany()
                        .HasForeignKey("SiteAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("SiteArea");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.UserClaim", b =>
                {
                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.UserLogin", b =>
                {
                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.UserRole", b =>
                {
                    b.HasOne("marking_api.DataModel.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.UserToken", b =>
                {
                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Logging.AuditDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.CommentDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Project.ThreadDM", "ParentThread")
                        .WithMany("Comments")
                        .HasForeignKey("ParentThreadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Project.ProjectDM", null)
                        .WithMany("Comments")
                        .HasForeignKey("ProjectDMProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("marking_api.DataModel.Project.CommentDM", "QuotedComment")
                        .WithMany()
                        .HasForeignKey("QuotedCommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentThread");

                    b.Navigation("QuotedComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.FeedbackDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Project.ProjectDM", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.GradeDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Project.FeedbackDM", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Project.GroupDM", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Feedback");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.GroupMarkerDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Project.GroupDM", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.InviteDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Project.GroupDM", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("marking_api.DataModel.Identity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.ProjectDM", b =>
                {
                    b.HasOne("marking_api.DataModel.FileSystem.FSFileDM", "EthicsForm")
                        .WithMany()
                        .HasForeignKey("EthicsFormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("marking_api.DataModel.Project.ThreadDM", "LinkedThread")
                        .WithMany("LinkedProjects")
                        .HasForeignKey("LinkedThreadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EthicsForm");

                    b.Navigation("LinkedThread");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.TagDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Project.GroupDM", "Group")
                        .WithMany("GroupTags")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("marking_api.DataModel.Project.ProjectDM", "Project")
                        .WithMany("ProjectTags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.ThreadDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Project.ProjectDM", "LinkedProject")
                        .WithMany("LinkedThreads")
                        .HasForeignKey("LinkedProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LinkedProject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.UserGradeDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Project.GroupDM", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Project.FeedbackDM", "Mark")
                        .WithMany()
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");

                    b.Navigation("Mark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.UserGroupDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Project.GroupDM", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.UserTagsDM", b =>
                {
                    b.HasOne("marking_api.DataModel.Project.TagDM", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("marking_api.DataModel.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFileDM", b =>
                {
                    b.Navigation("FileVersions");

                    b.Navigation("FolderFiles");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFileStateDM", b =>
                {
                    b.Navigation("FileVersions");
                });

            modelBuilder.Entity("marking_api.DataModel.FileSystem.FSFolderDM", b =>
                {
                    b.Navigation("ChildFolders");

                    b.Navigation("FolderFiles");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.LinkDM", b =>
                {
                    b.Navigation("LinkChildren");

                    b.Navigation("RoleLinks");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("marking_api.DataModel.Identity.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTags");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.GroupDM", b =>
                {
                    b.Navigation("GroupTags");

                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.ProjectDM", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LinkedThreads");

                    b.Navigation("ProjectTags");
                });

            modelBuilder.Entity("marking_api.DataModel.Project.ThreadDM", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LinkedProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
